#!/bin/bash

# ISSUES TODO
# - Handle if server fingerprint doesn't exists (ssh-keyscan -H HOSTNAME >> "$HOME/.ssh/known_hosts")

SCRIPT_ID="backup"
SCRIPT_ICON=" "
TIMESTAMP="$(date +%Y-%m-%d)"

PROCESS_FILE="/tmp/$SCRIPT_ID.pids"
PROCESS_ID=""

EXCLUDE_FILE="$ECOS_CONFIG_HOME/$SCRIPT_ID.exclude"
LOG_FILE="/tmp/$SCRIPT_ID.log"

#RSYNC_ARGS="-vaR --delete --progress"
RSYNC_ARGS="--numeric-ids --links --hard-links --one-file-system --itemize-changes --times --recursive --perms --owner --group --stats --human-readable"

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# MAIN
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

main() {

    # Create exclude file
    if [ ! -f "$EXCLUDE_FILE" ]; then
        {
            echo "[Cc]ache*"
            echo "[Tt]rash*"
            echo ".cache"
            echo ".gvfs"
            echo "~*"
        } >>"$EXCLUDE_FILE"
        echo "$EXCLUDE_FILE created"
    fi

    mesg_txt=" not mounted"
    if [ -s "$ECOS_BACKUP_DESTINATION/latest" ]; then
        latest_path=$(readlink "$ECOS_BACKUP_DESTINATION/latest")
        mesg_txt="$(basename "${latest_path}")"
        mesg_txt=" $mesg_txt"
    fi
    result="$(printf "Browse\nStart Backup\nTasks\nLogs\nSettings" | dmenu -i -p "$SCRIPT_ICON Backup Manager" -mesg "$mesg_txt")" || exit 1

    if [ "$result" = "Browse" ]; then
        xdg-open "$ECOS_BACKUP_DESTINATION"
    fi

    if [ "$result" = "Start Backup" ]; then
        result_start="$(printf "Yes\nNo" | dmenu -i -p "$SCRIPT_ICON Start Backup?")" || exit 1
        if [ "$result_start" = "No" ]; then
            exit 1
        fi
        start_backup
    fi

    if [ "$result" = "Tasks" ]; then
        show_running_tasks
    fi

    if [ "$result" = "Logs" ]; then
        zenity --width="800" --height="600" --text-info --title="Logs" --ok-label="Ok" --cancel-label="Close" --font="monospace" --filename="$LOG_FILE"
    fi

    if [ "$result" = "Settings" ]; then

        result_settings="$(printf "Edit Configuration\nEdit Exclude List" | dmenu -i -p "$SCRIPT_ICON Settings")" || exit 1

        if [ "$result_settings" = "Edit Configuration" ]; then
            if z_res=$(zenity --width="600" --height="400" --text-info --title="Configuration" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$ECOS_CONFIG_FILE"); then
                echo "$z_res" >"$ECOS_CONFIG_FILE"
                notify-send "Configuration saved"
            fi
        fi

        if [ "$result_settings" = "Edit Exclude List" ]; then

            if z_res=$(zenity --width="600" --height="400" --text-info --title="Excludes" --ok-label="Save" --cancel-label="Cancel" --font="monospace" --editable --filename="$EXCLUDE_FILE"); then
                echo "$z_res" >"$EXCLUDE_FILE"
                notify-send "Excludes saved"
            fi

        fi

    fi

}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# START BACKUP
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

start_backup() {

    if ! [ -d "$ECOS_BACKUP_SOURCE" ]; then
        notify-send "Error: $ECOS_BACKUP_SOURCE does not exists"
        exit 1
    fi

    if ! [ -d "$ECOS_BACKUP_DESTINATION" ]; then
        notify-send "Error: $ECOS_BACKUP_DESTINATION does not exists"
        exit 1
    fi

    echo "SOURCE: $ECOS_BACKUP_SOURCE"
    echo "BACKUP: $ECOS_BACKUP_DESTINATION"

    if [ "$ECOS_BACKUP_SSH_HOST" != "" ] && [ "$ECOS_BACKUP_SSH_USER" != "" ] && [ "$ECOS_BACKUP_SSH_PASS" != "" ]; then
        echo "MODE: SSH"
        (
            cd "$ECOS_BACKUP_SOURCE" || exit 1
            notify-send "SSH Backup started..."
            # ssh-keyscan -H "$ECOS_BACKUP_SSH_HOST" >> "$HOME/.ssh/known_hosts"
            sshpass -p "$ECOS_BACKUP_SSH_PASS" rsync $RSYNC_ARGS --exclude-from="$EXCLUDE_FILE" . "$ECOS_BACKUP_SSH_USER@$ECOS_BACKUP_SSH_HOST:$ECOS_BACKUP_DESTINATION/$TIMESTAMP/" --link-dest="$ECOS_BACKUP_DESTINATION/latest/" >>$LOG_FILE 2>&1
            wait

            sshpass -p "$ECOS_BACKUP_SSH_PASS" ssh -p 22 "$ECOS_BACKUP_SSH_USER@$ECOS_BACKUP_SSH_HOST" 'ln -nsf "'$ECOS_BACKUP_DESTINATION/$TIMESTAMP'" "'$ECOS_BACKUP_DESTINATION/latest'";' >>$LOG_FILE 2>&1
            wait

            notify-send "SSH Backup finished"
        ) &
        # Set process
        PROCESS_ID="$!"
        echo "$PROCESS_ID|$TIMESTAMP: $ECOS_BACKUP_DESTINATION" >>"$PROCESS_FILE"
    else
        echo "MODE: LOCAL"
        (
            cd "$ECOS_BACKUP_SOURCE" || exit 1
            notify-send "Local Backup started..."
            if ! rsync $RSYNC_ARGS --exclude-from="$EXCLUDE_FILE" . "$ECOS_BACKUP_DESTINATION/$TIMESTAMP/" --link-dest="$ECOS_BACKUP_DESTINATION/latest/" >>$LOG_FILE 2>&1; then
                notify-send "Error rsync"
                exit 1
            fi
            wait
            ln -nsf "$ECOS_BACKUP_DESTINATION/$TIMESTAMP" "$ECOS_BACKUP_DESTINATION/latest" >>$LOG_FILE 2>&1

            notify-send "Local Backup finished"
        ) &
        # Set process
        PROCESS_ID="$!"
        echo "$PROCESS_ID|$TIMESTAMP: $ECOS_BACKUP_DESTINATION" >>"$PROCESS_FILE"
    fi
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# SHOW TASKS
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

show_running_tasks() {

    result="$(cat $PROCESS_FILE | cut -f 2 -d '|' | dmenu -i -p "$SCRIPT_ICON Running Tasks")" || exit 1

    # Read every line from processes file
    while IFS= read -r line; do

        # Check if result is running task
        if echo "$line" | grep -q "$result*"; then

            task_pid=$(echo "$line" | cut -f 1 -d '|')
            task_name=$(echo "$line" | cut -f 2 -d '|')

            ask_cancel="$(printf "No\nYes" | dmenu -i -p "$SCRIPT_ICON Cancel: $task_name")" || exit 1
            if [ "$ask_cancel" = "Yes" ]; then

                kill_pid $task_pid
                notify-send "Task $task_name canceled"
            fi
            exit
        fi
    done <$PROCESS_FILE
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# SYSTEM
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

kill_pid() {
    pid_kill="$1"
    print_children_pid() {
        local children_pid
        children_pid="$(pgrep -P "$1")"
        for pid in $children_pid; do
            print_children_pid "$pid"
        done
        if [ "$children_pid" != "" ]; then
            printf "$children_pid "
        fi
    }
    pid_array=()
    pid_array+=("$pid_kill")
    pid_array+=($(print_children_pid "$pid_kill"))
    for pid in ${pid_array[@]}; do
        kill -9 "$pid"
    done

    # Remove pid from file
    sed -i "/$pid_kill/d" "$PROCESS_FILE"
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# DEPENDENCIES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

if ! [ -x "$(command -v rsync)" ]; then
    notify-send "ERROR: rsync not installed"
    exit 1
fi

if ! [ -x "$(command -v sshpass)" ]; then
    notify-send "ERROR: sshpass not installed"
    exit 1
fi

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# TRAP
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

on_trap() {
    if [ "$PROCESS_ID" != "" ]; then
        kill_pid $PROCESS_ID
    fi
}

# Set trap
trap 'on_trap' 0 1 3 6

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# BOOT
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

main "$@"
wait # Wait for sub process

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
