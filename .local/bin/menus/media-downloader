#!/bin/bash

SCRIPT_ICON="ï’˜ "
PROCESS_FILE="/tmp/persist.pids"
PROCESS_ID=""

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# FUNCTIONS
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

dl_music() {

	# Ask for converter
	convert_enabled=false
	ask_convert="$(printf "Original\n432Hz" | dmenu -i -p "$SCRIPT_ICON Converter:")" || exit 1
	if [ "$ask_convert" = "432Hz" ]; then
		convert_enabled=true
	fi

	# Fetch title
	notify-send "Fetching Information..."
	music_title=$(youtube-dl --get-title --restrict-filenames $1)

	#music_title="$(printf "$music_title" | dmenu -i -p "Music Title:")" || exit 1
	music_title=$(zenity --width=420 --entry --text "Music Title" --entry-text "$music_title") || exit 1

	# Download
	notify-send "Downloading $music_title..."
	mkdir -p "$ECOS_DOWNLOAD_MUSIC"

	(
		if ! youtube-dl -x -f bestaudio/best --audio-format mp3 --metadata-from-title "%(artist)s - %(title)s" --restrict-filenames -o "$ECOS_DOWNLOAD_MUSIC/$music_title.%(ext)s" "$1"; then
			notify-send "$music_title Error"
			exit 1
		fi

		# Convert
		if [ "$convert_enabled" = "true" ]; then
			input_file="$ECOS_DOWNLOAD_MUSIC/$music_title.mp3"
			file_name="${input_file%.*}"
			file_extension="${input_file##*.}"

			output_file="$file_name (432Hz).$file_extension"
			if ! ffmpeg -y -i "$input_file" -filter:a "atempo=0.98182" "$output_file"; then
				return 1
			fi
			if [ -f "$output_file" ]; then
				rm -v "$input_file"
			fi
		fi

		notify-send "$music_title finished"
	) &

	# Set process
	PROCESS_ID="$!"
	echo "$PROCESS_ID|MUSIC: $music_title" >>"$PROCESS_FILE"
}

#--------------------------------

dl_movie() {

	# Ask for movie title
	#movie_title="$(dmenu -i -p "Movie Title:")"
	movie_title=$(zenity --width=420 --entry --text "Movie Title" --entry-text "") || exit 1

	# Download
	notify-send "Downloading $movie_title..."
	mkdir -p "$ECOS_DOWNLOAD_MOVIES"

	(
		if ! youtube-dl -f best --output "$ECOS_DOWNLOAD_MOVIES/$movie_title.%(ext)s" "$1"; then
			notify-send "Download Error: $movie_title"
			exit 1
		fi

		notify-send "$movie_title finished"
	) &

	# Set process
	PROCESS_ID="$!"
	echo "$PROCESS_ID|MOVIE: $movie_title" >>"$PROCESS_FILE"

}

#--------------------------------
dl_video() {

	# Fetch title
	notify-send "Fetching Information..."
	video_title=$(youtube-dl --get-title --restrict-filenames $1)

	#video_title="$(printf "$video_title" | dmenu -i -p "Video Title:")" || exit 1
	video_title=$(zenity --width=420 --entry --text "Video Title" --entry-text "$video_title") || exit 1

	# Download
	notify-send "Downloading $video_title..."
	mkdir -p "$ECOS_DOWNLOAD_VIDEOS"

	(
		if ! youtube-dl -f best --restrict-filenames -o "$ECOS_DOWNLOAD_VIDEOS/$video_title.%(ext)s" "$1"; then
			notify-send "$video_title Error"
			exit 1
		fi

		notify-send "$video_title finished"
	) &
	# Set process
	PROCESS_ID="$!"
	echo "$PROCESS_ID|VIDEO: $video_title" >>"$PROCESS_FILE"
}

#--------------------------------

kill_pid() {
	pid_kill="$1"
	print_children_pid() {
		local children_pid
		children_pid="$(pgrep -P "$1")"
		for pid in $children_pid; do
			print_children_pid "$pid"
		done
		if [ "$children_pid" != "" ]; then
			printf "$children_pid "
		fi
	}
	pid_array=()
	pid_array+=("$pid_kill")
	pid_array+=($(print_children_pid "$pid_kill"))
	for pid in ${pid_array[@]}; do
		kill -9 "$pid"
	done

	# Remove pid from file
	sed -i "/$pid_kill/d" "$PROCESS_FILE"
}

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# DEPENDENCIES
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

if ! [ -x "$(command -v zenity)" ]; then
	notify-send "ERROR: zenity not installed"
	exit 1
fi

if ! [ -x "$(command -v youtube-dl)" ]; then
	notify-send "ERROR: youtube-dl not installed"
	exit 1
fi

if ! [ -x "$(command -v ffmpeg)" ]; then
	notify-send "ERROR: ffmpeg not installed"
	exit 1
fi

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# TRAP
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

on_trap() {
	if [ "$PROCESS_ID" != "" ]; then
		kill_pid $PROCESS_ID
	fi
}

# Set trap
trap 'on_trap' 0 1 3 6

#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# MAIN
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

# Ask for url
url="$(cat $PROCESS_FILE | cut -f 2- -d '|' | dmenu -i -p "$SCRIPT_ICON  URL:")" || exit 1

# Read every line from processes file
while IFS= read -r line; do

	# Check if url is running task
	if echo "$line" | grep -q "$url*"; then

		task_pid=$(echo "$line" | cut -f 1 -d '|')
		task_name=$(echo "$line" | cut -f 2- -d '|')

		ask_cancel="$(printf "No\nYes" | dmenu -i -p "$SCRIPT_ICON Cancel $task_name?")" || exit 1
		if [ "$ask_cancel" = "Yes" ]; then

			kill_pid $task_pid
			notify-send "$task_name canceled"
		fi
		exit
	fi
done <$PROCESS_FILE

#--------------------------------

# Ask download type
choice="$(printf "Music\nVideo\nMovie" | dmenu -i -p "$SCRIPT_ICON Download Type:")" || exit 1
case $choice in
Music) dl_music $url ;;
Video) dl_video $url ;;
Movie) dl_movie $url ;;
esac

#--------------------------------

# Wait for sub process
wait

#--------------------------------
